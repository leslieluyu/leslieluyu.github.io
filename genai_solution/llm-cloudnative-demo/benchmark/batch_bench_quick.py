from kubernetes import client, config
import argparse
import subprocess
import time
import logging
from base import init_logger
from datetime import datetime
import json

timestamp = datetime.now().strftime("%Y-%m-%d-%H-%M-%S")
wait_seconds=30
prompt = "Once upon a time, there existed a little girl who liked to have adventures. She wanted to go to places and meet new people, and have fun"
iterations = 1
# Set the list of CPU values you want to apply
#cpu_values = [1, 2, 4, 8, 16,24,32,40,48,56,64,72,80,88]
cpu_values = [112]

def cpu_seq(step,max_cpu):
  end = max_cpu-4
  increment = step

  sequence = [1]  # Start the sequence with 1

  current_number = 0
  while current_number + increment <= end:
    current_number += increment
    sequence.append(current_number)

  print(sequence)
  return sequence

def modify_deployment_resources(deployment_name, cpu_value, cmd):
    config.load_kube_config()  # Load the Kubernetes config from the default location

    v1 = client.AppsV1Api()
    deployment = v1.read_namespaced_deployment(deployment_name, "default")

    # Modify CPU requests and limits
    container = deployment.spec.template.spec.containers[0]
    container.resources.requests["cpu"] = str(cpu_value)
    container.resources.limits["cpu"] = str(cpu_value)

    # Set OMP_NUM_THREADS
    container.env.append(client.V1EnvVar(name="OMP_NUM_THREADS", value=str(cpu_value)))
     
    # Set the command
    if cmd.strip():
        cmd_array = cmd.split()
        deployment.spec.template.spec.containers[0].command = cmd_array
    else:
        logger.info(f"Skipping empty command: {cmd}")


    v1.patch_namespaced_deployment(
        name=deployment_name, namespace="default", body=deployment
    )
    logger.info("Deployment '{}' modified with CPU value: {}".format(deployment_name, cpu_value))


def scale_deployment(replicas,deploy_name):
    scale_command = ['kubectl', 'scale', f'deployment/{deploy_name}', f'--replicas={replicas}']
    logger.info(f"before scale, deveployment: {deploy_name} to replicas={replicas}")
    process = subprocess.Popen(scale_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True)
    for line in process.stdout:
        logger.info(line.strip())
    logger.info(f"finish scale, deveployment: {deploy_name} to replicas={replicas}")

def wait_ready_deploy(deploy_name):
    rollout_command = ['kubectl', 'rollout', 'status', f'deployment/{deploy_name}']
    logger.info(f"before rollout_command, deveployment: {deploy_name}")
    #subprocess.run(rollout_command, check=True)
    process = subprocess.Popen(rollout_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True)
    for line in process.stdout:
        logger.info(line.strip())
    logger.info(f"finish rollout_command, deveployment: {deploy_name}")

    
def wait_for_deployment_complete(deployment_name):
    config.load_kube_config()  # Load the Kubernetes config from the default location

    v1 = client.AppsV1Api()

    while True:
        deployment = v1.read_namespaced_deployment(deployment_name, "default")
        available_replicas = deployment.status.available_replicas
        replicas = deployment.spec.replicas

        if available_replicas is not None and available_replicas == replicas:
            logger.info(f"Deployment '{deployment_name}' is complete")
            break
        else:
            logger.info(f"Waiting for deployment '{deployment_name}' to complete...")
            time.sleep(10)


def process_result(result,extraInfo):
        response_data = json.loads(result)
        logger.info(f"{extraInfo} - Status: {response_data['status']}")
        logger.info(f"Total Duration: {response_data.get('total_dur', 'N/A')}")
        logger.info(f"Prompt Tokens: {response_data.get('prompt_tokens', 'N/A')}")
        logger.info(f"Completion Tokens: {response_data.get('completion_tokens', 'N/A')}")
        logger.info(f"Latency per Token: {response_data.get('latency_per_token', 'N/A')}")
        logger.info("\n")

def do_bench(cpu_value,round,prompt):
    # Run the curl command
    logger.info(f"prompt={prompt}")
    logger.info(f"wait for {wait_seconds}")
    #time.sleep(wait_seconds)  # Wait for 5 seconds after deployment completion
    logger.info(f"after time sleep, now send request to service")
    data = {
        "prompt": prompt,
        "history": []
    }



    start_metrics_job(cpu_value,round)
    # curl_command = (
    #   	'curl -s -X POST "http://172.16.28.100:30021/v1/completions" '
    # 	'-H \'Content-Type: application/json\' '
   	#  	'-d \'{{"prompt": "{}", "history": []}}\''
    # ).format(escaped_prompt)
    # Convert the dictionary to a JSON string with proper escaping
    json_data = json.dumps(data).replace('"', r'\"')
    # Create the curl command with the JSON data
    curl_command = (
        'curl -s -X POST "http://172.16.28.100:30021/v1/completions" '
        '-H "Content-Type: application/json" '
        '-d "{}"'.format(json_data)
    )
 
    # subprocess.run(curl_command, shell=True, check=True)
    process = subprocess.Popen(curl_command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True)
    # Read and print output line by line
    extraInfo = "CPU_Value=" + str(cpu_value)
    for line in process.stdout:
        result = line.strip()
        logger.info(line.strip())

    # Read and print error output line by line
    for line in process.stderr:
        logger.error(line.strip())

    # Wait for the process to complete

    process.wait()
    process_result(result,extraInfo)
    stop_metrics_job()


def do_shell(script):
    script_path = script

    try:
        # Run the shell script
        process = subprocess.Popen(script_path, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)

        # Wait for the script to complete and capture its return code
        return_code = process.wait()

        # Capture the stdout and stderr from the script (if needed)
        stdout, stderr = process.communicate()

        # Print the return code
        print(f"Return Code: {return_code}")

        # Print the script's output (stdout and stderr)
        print("Script Output:")
        print(stdout.decode())
        print(stderr.decode())

        # You can perform additional actions based on the return code here
        if return_code == 0:
            print("Script executed successfully.")
        else:
            print("Script execution failed.")

    except Exception as e:
        print(f"Error: {str(e)}")

def do_ansible(command):

    try:
        # Run the Ansible playbook command
        subprocess.run(command, check=True)
        print("Ansible playbook executed successfully.")
    except subprocess.CalledProcessError as e:
        print(f"Ansible playbook execution failed with return code {e.returncode}.")
    except Exception as e:
        print(f"An error occurred: {str(e)}")

def get_pid_from_file():
    input_file_name = 'llm.pid'
    llm_pid=""

    try:
        # Open and read the content of the input file
        with open(input_file_name, 'r') as input_file:
            llm_pid = input_file.read()


    except FileNotFoundError:
        print(f"'{input_file_name}' not found.")
    except Exception as e:
        print(f"An error occurred: {str(e)}")
    return llm_pid



def copy_script():
    logger.info("copy_script")
    # Define the Ansible playbook command as a list
    ansible_command = [
        "ansible-playbook",
        "-i",
        "hosts",
        "metric_jobs.yaml",
        "--tags",
        "copy_job"
    ]
    do_ansible(ansible_command)

def get_metrics():
    # getPid
    logger.info("get Pid")
    do_shell("./getPids.sh")
    llm_pid = get_pid_from_file()
    logger.info(f"llm_pid =  {llm_pid} ")
    
    # set RDT
    logger.info("set RDT pid for monitoring memory bandwidth ")
    do_shell("./rdtPids.sh")

    # run job
    logger.info("run job")

    
def start_metrics_job(cpu,round):
    logger.info("start metrics job")
    do_shell("./getPids.sh")
    llm_pid = get_pid_from_file()
    logger.info(f"llm_pid =  {llm_pid} ")

   
    extra_vars = {
        "LOG_PATH": "mtr_"+TS+"_c"+str(cpu)+"_r"+str(round),
        "PIDS": llm_pid
    }

    # Convert the dictionary to a JSON string
    extra_vars_json = json.dumps(extra_vars)

    # Define the Ansible playbook command
    ansible_command = [
        "ansible-playbook",
        "-i",
        "hosts",
        "metric_jobs.yaml",
        "--tags",
        "run_job",
        "--extra-vars",
        extra_vars_json
    ]
    do_ansible(ansible_command)

def stop_metrics_job():
    logger.info("stop metrics job")
    ansible_command = [
    "ansible-playbook",
    "-i",
    "hosts",
    "metric_jobs.yaml",
    "--tags",
    "get_jobid,stop_job"
    ]  
    do_ansible(ansible_command)

import math

def generate_numa_commands(max_cpu=96, step=8):
    i00 = max_cpu//4
    i01 = 2*max_cpu//4 
    i10 = 3*max_cpu//4
    i11 = max_cpu-4
    
    n00 = max_cpu//4-1
    n01 = 3*max_cpu//4-1
    n10 = 2*max_cpu//4-1 
    n11 = max_cpu-1
    
    current_cpu = 0
    numa_command = ""
    commands = []
    numa_command = f"/usr/bin/numactl -C 1 python3 llm_inference_api.py"
    commands.append(numa_command)
    while current_cpu < max_cpu:
        current_cpu += step
        
        if current_cpu == 0:
            numa_command = f"/usr/bin/numactl -C 1"
        elif current_cpu <= i00:
            numa_command = f"/usr/bin/numactl -C 0-{current_cpu-1}"
        elif current_cpu <= i01:
            numa_command = f"/usr/bin/numactl -C 0-{n00},{i01}-{current_cpu+i00-1}" 
        elif current_cpu <= i10:
            numa_command = f"/usr/bin/numactl -C 0-{n00},{i01}-{n01},{i00}-{current_cpu-i00-1}"
        elif current_cpu <= i11:
            numa_command = f"/usr/bin/numactl -C 0-{n00},{i01}-{n01},{i00}-{n10},{i10}-{current_cpu-1}"
        else:
            break
        numa_command = numa_command + " python3 llm_inference_api.py"
        commands.append(numa_command)    
        print(numa_command)
        
    return commands
    
def do_test():
    # Your JSON response string
    response_string = '{"status":200,"time":"2023-08-29 08:04:17","prompt":"What is AI?","history":[],"completion":"\\nAI stands for Artificial Intelligence. AI refers to the development of computer systems or software that can perform tasks that typically require human intelligence, such as visual perception, speech recognition, decision-making, and language translation.\\n\\nAI systems can be designed to perform a wide range of tasks, from simple and repetitive tasks to complex and creative tasks. They are often trained using large amounts of data and algorithms that allow them to learn and improve over time.\\n\\nSome examples of AI include voice recognition software, image and speech recognition software, and machine learning algorithms that can be used to analyze and predict data. AI has the potential to revolutionize many industries and make our lives easier and more efficient.","total_dur":34.8892924785614,"prompt_tokens":6,"completion_tokens":140,"latency_per_token":249.18270451681954}'

    # Parse the JSON response string
    response_data = json.loads(response_string)

    # Extract and print the desired values
    # status = response_data["status"]
    # status = response_data.get('status')
    # total_dur = response_data["total_dur"]
    # prompt_tokens = response_data["prompt_tokens"]
    # completion_tokens = response_data["completion_tokens"]
    # latency_per_token = response_data["latency_per_token"]

        # Extract and print the desired values with default values
    status = response_data.get('status', 'No Status')
    total_dur = response_data.get('total_dur', "N/A")
    prompt_tokens = response_data.get("prompt_tokens", 0)
    completion_tokens = response_data.get('completion_tokens', 0)
    latency_per_token = response_data.get('latency_per_token', 0.0)

    print("Status:", status)
    print("Total Duration:", total_dur)
    logger.info(f"Total Duration:{response_data.get('total_dur', 'N/A')}")
    print("Prompt Tokens:", prompt_tokens)
    print("Completion Tokens:", completion_tokens)
    print("Latency per Token:", latency_per_token)



if __name__ == "__main__":
    parameters = {
    #good"32":   "Once upon a time, there existed a little girl who liked to have adventures. She wanted to go to places and meet new people, and have fun",
    "512":  "answer in 24 words: It is done, and submitted. You can play 'Survival of the Tastiest' on Android, and on the web. Playing on the web works, but you have to simulate multiple touch for table moving and that can be a bit confusing. There is a lot I'd like to talk about. I will go through every topic, insted of making the typical what went right/wrong list. Concept Working over the theme was probably one of the hardest tasks which I had to face. Originally, I had an idea of what kind of game I wanted to develop, gameplay wise - something with a lot of enemies/actors, simple graphics, maybe set in space, controlled from a top-down view. I was confident that I could fit any theme around it. In the end, the problem with a theme like 'Evolution' in a game is that evolution is unassisted. It happens through several seemingly random mutations over time, with the most apt permutation surviving. This genetic car simulator is, in my opinion, a great example of actual evolution of a species facing a challenge. But is it a game? In a game, you need to control something to reach an objective. That control goes against what evolution is supposed to be like. If you allow the user to pick how to evolve something, it's not evolution anymore - it's the equivalent of intelligent design, the fable invented by creationists to combat the idea of evolution. Being agnostic and a Pastafarian, that's not something that rubbed me the right way. Hence, my biggest dillema when deciding what to create was not with what I wanted to create, but with what I did not. I didn't want to create an 'intelligent design' simulator and wrongly call it evolution. This is a problem, of course, every other contestant also had to face. And judging by the entries submitted, not many managed to work around it. I'd say the only real solution was through the use of artificial selection, somehow. So far, I have not seen any entry using this at its core gameplay. Alas, this is just a fun competition and after a while I decided not to be as strict with the game idea, and allowed myself to pick whatever I thought would work out. My initial idea was to create something where humanity tried to evolve to a next level",
    #"1024":  "At daybreak the young hero embarked on a perilous journey through the misty vale. Wary of lurking beasts, he tread lightly over the damp earth. In the distance, a majestic castle loomed over the horizon. The lad hoped to find refuge there. As the sun rose over the hills, its brilliant rays illuminated the landscape. The dense fog began to dissipate, revealing a winding path. Cautious, the traveler gripped his walking stick and proceeded ahead. He soon arrived at a fork in the road. Unsure which route to take, he chose the path to the left. After some time, he came upon a babbling brook. The cool water looked inviting. Kneeling down to take a drink, he noticed tiny fish swimming along with the current. He watched them for a moment, then continued on. Before long, the trail became rocky and steep. Clambering over large boulders, he reached a sheer cliffside. There was no choice but to scale the precipice. Finding handholds in the rock face, he started to climb. It was arduous work. His muscles ached but he persevered, finally pulling himself up onto a ledge. He sat there catching his breath and gazed out at the vistas before him. In the far distance, he could make out the turrets of the castle. It gave him hope. With renewed vigor, the lad ventured upward. As the sun passed its zenith, he neared the summit. Glancing back, he saw how far he had come. Towering pines now looked diminutive from this height. Pressing forward, he pushed through waist-high drifts of snow. Icy winds nipped at his cheeks but could not deter him. At last he reached the top. An immense valley spread out below. Nestled within was the majestic castle, now close at hand. But the final stretch would prove the most perilous. Hugging the mountainside, he inched along a narrow outcropping with a precipitous drop. He dared not look down. The risk was great, but he trusted in his abilities. Inch by inch he traversed the ledge, finally reaching more stable ground. From there, it was a short hike to the castle gates. He arrived there exhausted but jubilant. The grand wooden doors slowly opened, and he was greeted by a friendly maiden. Welcome to our castle, brave lad, she said. Stay and rest here as long as you like. At last, he had found a sanctuary. His long journey was at an end. At daybreak the young hero embarked on a perilous journey through the misty vale. Wary of lurking beasts, he tread lightly over the damp earth. In the distance, a majestic castle loomed over the horizon. The lad hoped to find refuge there. As the sun rose over the hills, its brilliant rays illuminated the landscape. The dense fog began to dissipate, revealing a winding path. Cautious, the traveler gripped his walking stick and proceeded ahead. He soon arrived at a fork in the road. Unsure which route to take, he chose the path to the left. After some time, he came upon a babbling brook. The cool water looked inviting. Kneeling down to take a drink, he noticed tiny fish swimming along with the current. He watched them for a moment, then continued on. Before long, the trail became rocky and steep. Clambering over large boulders, he reached a sheer cliffside. There was no choice but to scale the precipice. Finding handholds in the rock face, he started to climb. It was arduous work. His muscles ached but he persevered, finally pulling himself up onto a ledge. He sat there catching his breath and gazed out at the vistas before him. In the far distance, he could make out the turrets of the castle. It gave him hope. With renewed vigor, the lad ventured upward. As the sun passed its zenith, he neared the summit. Glancing back, he saw how far he had come. Towering pines now looked diminutive from this height. Pressing forward, he pushed through waist-high drifts of snow. Icy winds nipped at his cheeks but could not deter him. At last he reached the top. An immense valley spread out below. Nestled within was the majestic castle, now close at hand. But the final stretch would prove the most perilous. Hugging the mountainside, he inched along a narrow outcropping with a precipitous drop. He dared not look down. The risk was great, but he trusted in his abilities. Inch by inch he traversed the ledge, finally reaching more stable ground. From there, it was a short hike to the castle gates. He arrived there exhausted but jubilant. The grand wooden doors slowly opened, and he was greeted by a friendly maiden. Welcome to our castle, brave lad, she said. Stay and rest here as long as you like. At last, he had found a sanctuary. His long journey was at an end. based on this text please give me a summary no less than 2048 words.",
    
    
    #"1024":  "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla nec sapien nec ipsum ullamcorper fermentum. Sed a bibendum metus, sed posuere tellus. Vivamus a condimentum elit. Fusce a lorem vel urna ullamcorper lacinia. Integer eget justo eu quam luctus tempus. Curabitur lacinia, elit vel malesuada dignissim, odio dolor volutpat metus, ac bibendum sapien tortor vel est. Nam quis velit quis risus vulputate congue. Maecenas eget justo non orci venenatis suscipit. Quisque fringilla eget ipsum et mattis. Nunc in ligula at orci varius efficitur. Donec lacinia justo et nibh bibendum, sit amet dignissim odio malesuada. Vivamus non augue quis nulla egestas fringilla in ut libero. Fusce sed neque in elit sodales eleifend. Fusce at turpis at dolor consequat finibus. Vivamus vulputate, justo sit amet laoreet euismod, libero felis volutpat nulla, non consectetur libero tellus ut odio. Sed ut rhoncus ligula. Sed ut lorem a arcu auctor feugiat eget id erat. Etiam et cursus odio. Proin auctor eget nisl vel auctor. Aliquam nec sodales justo, sed euismod elit. Pellentesque euismod vestibulum erat non laoreet. Ut tincidunt at ipsum non rhoncus. Sed vitae fringilla ipsum. Nunc id justo nec ligula faucibus ultrices ac quis risus. Integer vitae est a enim euismod efficitur. Fusce in tellus non quam sagittis volutpat id non arcu. Nullam fermentum lacinia libero, ut posuere nisl viverra sit amet. Maecenas vel lacus sed sapien luctus feugiat sit amet ut arcu. Sed facilisis urna ac bibendum luctus. Duis eu risus in arcu gravida bibendum. Sed semper, justo id laoreet congue, tortor massa dictum dolor, sit amet convallis quam nulla in justo. Sed dapibus nunc sit amet arcu tincidunt tincidunt. Quisque bibendum urna vitae orci tristique, et fermentum velit auctor. Nulla facilisi. Fusce congue, justo eget interdum vehicula, ante est malesuada velit, in blandit nulla justo non felis. Aliquam id justo nec orci bibendum dignissim ac ut nunc. Nunc sollicitudin mi at libero efficitur, vel lobortis tortor consectetur. Morbi eget ultrices quam, eu dapibus ipsum. Proin interdum, elit ut efficitur congue, nunc neque suscipit odio, nec hendrerit enim lectus vel est. Nullam id enim sed nunc cursus consectetur. Aenean condimentum laoreet nisi, eu aliquet quam vehicula eu. Praesent vel ligula id odio vehicula sodales. Aenean euismod ligula eget est dictum cursus. Nulla facilisi. Vivamus tristique felis non metus volutpat, a vehicula odio vestibulum. Integer auctor lacinia risus, a blandit ex iaculis ut. Vivamus non nulla in sapien fermentum bibendum. Vivamus lacinia feugiat risus, eget cursus risus cursus non. Suspendisse potenti. Sed eget urna dolor. Nunc tincidunt ante ac eros viverra cursus. Aliquam erat volutpat. Donec volutpat nisi vel neque dictum, eu convallis ante consequat. Aenean at diam vitae libero congue posuere. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Curabitur a felis id odio rhoncus sodales. Fusce auctor, libero id lacinia aliquam, ipsum enim vulputate justo, in efficitur nunc odio a urna. Suspendisse potenti. Maecenas non dolor quis est hendrerit euismod. Integer ac varius arcu, ac bibendum dolor. Nullam venenatis, risus nec bibendum tincidunt, arcu dui placerat purus, quis ultricies erat urna non velit. Suspendisse potenti. Integer sodales velit vel risus tristique, a tincidunt turpis fringilla. Duis commodo purus ut elit vehicula, in egestas odio mattis. Vivamus venenatis efficitur ante, id varius est blandit non. Sed eget urna eu purus dignissim suscipit.",
    #"1024": 'At daybreak the young hero embarked on a perilous journey through the misty vale. Wary of lurking beasts, he tread lightly over the damp earth. In the distance, a majestic castle loomed over the horizon. The lad hoped to find refuge there. As the sun rose over the hills, its brilliant rays illuminated the landscape. The dense fog began to dissipate, revealing a winding path. Cautious, the traveler gripped his walking stick and proceeded ahead. He soon arrived at a fork in the road. Unsure which route to take, he chose the path to the left. After some time, he came upon a babbling brook. The cool water looked inviting. Kneeling down to take a drink, he noticed tiny fish swimming along with the current. He watched them for a moment, then continued on. Before long, the trail became rocky and steep. Clambering over large boulders, he reached a sheer cliffside. There was no choice but to scale the precipice. Finding handholds in the rock face, he started to climb. It was arduous work. His muscles ached but he persevered, finally pulling himself up onto a ledge. He sat there catching his breath and gazed out at the vistas before him. In the far distance, he could make out the turrets of the castle. It gave him hope. With renewed vigor, the lad ventured upward. As the sun passed its zenith, he neared the summit. Glancing back, he saw how far he had come. Towering pines now looked diminutive from this height. Pressing forward, he pushed through waist-high drifts of snow. Icy winds nipped at his cheeks but could not deter him. At last he reached the top. An immense valley spread out below. Nestled within was the majestic castle, now close at hand. But the final stretch would prove the most perilous. Hugging the mountainside, he inched along a narrow outcropping with a precipitous drop. He dared not look down. The risk was great, but he trusted in his abilities. Inch by inch he traversed the ledge, finally reaching more stable ground. From there, it was a short hike to the castle gates. He arrived there exhausted but jubilant. The grand wooden doors slowly opened, and he was greeted by a friendly maiden. "Welcome to our castle, brave lad," she said. "Stay and rest here as long as you like." At last, he had found a sanctuary. His long journey was at an end. At daybreak the young hero embarked on a perilous journey through the misty vale. Wary of lurking beasts, he tread lightly over the damp earth. In the distance, a majestic castle loomed over the horizon. The lad hoped to find refuge there. As the sun rose over the hills, its brilliant rays illuminated the landscape. The dense fog began to dissipate, revealing a winding path. Cautious, the traveler gripped his walking stick and proceeded ahead. He soon arrived at a fork in the road. Unsure which route to take, he chose the path to the left. After some time, he came upon a babbling brook. The cool water looked inviting. Kneeling down to take a drink, he noticed tiny fish swimming along with the current. He watched them for a moment, then continued on. Before long, the trail became rocky and steep. Clambering over large boulders, he reached a sheer cliffside. There was no choice but to scale the precipice. Finding handholds in the rock face, he started to climb. It was arduous work. His muscles ached but he persevered, finally pulling himself up onto a ledge. He sat there catching his breath and gazed out at the vistas before him. In the far distance, he could make out the turrets of the castle. It gave him hope. With renewed vigor, the lad ventured upward. As the sun passed its zenith, he neared the summit. Glancing back, he saw how far he had come. Towering pines now looked diminutive from this height. Pressing forward, he pushed through waist-high drifts of snow. Icy winds nipped at his cheeks but could not deter him. At last he reached the top. An immense valley spread out below. Nestled within was the majestic castle, now close at hand. But the final stretch would prove the most perilous. Hugging the mountainside, he inched along a narrow outcropping with a precipitous drop. He dared not look down. The risk was great, but he trusted in his abilities. Inch by inch he traversed the ledge, finally reaching more stable ground. From there, it was a short hike to the castle gates. He arrived there exhausted but jubilant. The grand wooden doors slowly opened, and he was greeted by a friendly maiden. "Welcome to our castle, brave lad," she said. "Stay and rest here as long as you like." At last, he had found a sanctuary. His long journey was at an end.',
    #"512":  "It is done, and submitted. You can play 'Survival of the Tastiest' on Android, and on the web. Playing on the web works, but you have to simulate multiple touch for table moving and that can be a bit confusing. There is a lot I'd like to talk about. I will go through every topic, insted of making the typical what went right/wrong list. Concept Working over the theme was probably one of the hardest tasks which I had to face. Originally, I had an idea of what kind of game I wanted to develop, gameplay wise - something with a lot of enemies/actors, simple graphics, maybe set in space, controlled from a top-down view. I was confident that I could fit any theme around it. In the end, the problem with a theme like 'Evolution' in a game is that evolution is unassisted. It happens through several seemingly random mutations over time, with the most apt permutation surviving. This genetic car simulator is, in my opinion, a great example of actual evolution of a species facing a challenge. But is it a game? In a game, you need to control something to reach an objective. That control goes against what evolution is supposed to be like. If you allow the user to pick how to evolve something, it's not evolution anymore - it's the equivalent of intelligent design, the fable invented by creationists to combat the idea of evolution. Being agnostic and a Pastafarian, that's not something that rubbed me the right way. Hence, my biggest dillema when deciding what to create was not with what I wanted to create, but with what I did not. I didn't want to create an 'intelligent design' simulator and wrongly call it evolution. This is a problem, of course, every other contestant also had to face. And judging by the entries submitted, not many managed to work around it. I'd say the only real solution was through the use of artificial selection, somehow. So far, I have not seen any entry using this at its core gameplay. Alas, this is just a fun competition and after a while I decided not to be as strict with the game idea, and allowed myself to pick whatever I thought would work out. My initial idea was to create something where humanity tried to evolve to a next level but had some kind of foe trying to stop them from doing so. I kind of had this image of human souls flying in space towards a monolith or a space baby (all based in 2001: A Space Odyssey of course) but I couldn't think of compelling (read: serious) mechanics for that. Borgs were my next inspiration, as their whole hypothesis fit pretty well into the evolution theme. But how to make it work? Are you the borg, or fighting the Borg? The third and final idea came to me through my girlfriend, who somehow gave me the idea of making something about the evolution of Pasta. The more I thought about it the more it sounded like it would work, so I decided to go with it. Conversations with my inspiring co-worker Roushey (who also created the 'Mechanical Underdogs' signature logo for my intros) further matured the concept, as it involved into the idea of having individual pieces of pasta flying around and trying to evolve until they became all-powerful. A secondary idea here was that the game would work to explain how the Flying Spaghetti Monster came to exist - by evolving from a normal dinner table. So the idea evolved more or less into this: you are sitting a table. You have your own plate, with is your 'base'. There are 5 other guests at the table, each with their own plate. Your plate can spawn little pieces of pasta. You do so by 'ordering' them through a menu. Some pastas are better than others; some are faster, some are stronger. They have varying 'costs', which are debited from your credits (you start with a number of credits). Once spawned, your pastas start flying around. Their instinct is to fly to other plates, in order to conquer them (the objective of the game is having your pasta conquer all the plates on the table). But they are really autonomous, so after being spawned, you have no control over your pasta (think DotA or LoL creeps). Your pasta doesn't like other people's pasta, so if they meet, they shoot sauce at each other until one dies. You get credits for other pastas your own pasta kill.Once a pasta is in the vicinity of a plate, it starts conquering it for its team. It takes around 10 seconds for a plate to be conquered; less if more pasta from the same team are around. If pasta from other team are around, though, they get locked down in their attempt, unable to conquer the plate, until one of them die (think Battlefield's standard 'Conquest' mode).",
    #"2017": "It is done, and submitted. You can play 'Survival of the Tastiest' on Android, and on the web. Playing on the web works, but you have to simulate multiple touch for table moving and that can be a bit confusing. There is a lot I'd like to talk about. I will go through every topic, insted of making the typical what went right/wrong list. Concept Working over the theme was probably one of the hardest tasks which I had to face. Originally, I had an idea of what kind of game I wanted to develop, gameplay wise - something with a lot of enemies/actors, simple graphics, maybe set in space, controlled from a top-down view. I was confident that I could fit any theme around it. In the end, the problem with a theme like 'Evolution' in a game is that evolution is unassisted. It happens through several seemingly random mutations over time, with the most apt permutation surviving. This genetic car simulator is, in my opinion, a great example of actual evolution of a species facing a challenge. But is it a game? In a game, you need to control something to reach an objective. That control goes against what evolution is supposed to be like. If you allow the user to pick how to evolve something, it's not evolution anymore - it's the equivalent of intelligent design, the fable invented by creationists to combat the idea of evolution. Being agnostic and a Pastafarian, that's not something that rubbed me the right way. Hence, my biggest dillema when deciding what to create was not with what I wanted to create, but with what I did not. I didn't want to create an 'intelligent design' simulator and wrongly call it evolution. This is a problem, of course, every other contestant also had to face. And judging by the entries submitted, not many managed to work around it. I'd say the only real solution was through the use of artificial selection, somehow. So far, I have not seen any entry using this at its core gameplay. Alas, this is just a fun competition and after a while I decided not to be as strict with the game idea, and allowed myself to pick whatever I thought would work out. My initial idea was to create something where humanity tried to evolve to a next level but had some kind of foe trying to stop them from doing so. I kind of had this image of human souls flying in space towards a monolith or a space baby (all based in 2001: A Space Odyssey of course) but I couldn't think of compelling (read: serious) mechanics for that. Borgs were my next inspiration, as their whole hypothesis fit pretty well into the evolution theme. But how to make it work? Are you the borg, or fighting the Borg? The third and final idea came to me through my girlfriend, who somehow gave me the idea of making something about the evolution of Pasta. The more I thought about it the more it sounded like it would work, so I decided to go with it. Conversations with my inspiring co-worker Roushey (who also created the 'Mechanical Underdogs' signature logo for my intros) further matured the concept, as it involved into the idea of having individual pieces of pasta flying around and trying to evolve until they became all-powerful. A secondary idea here was that the game would work to explain how the Flying Spaghetti Monster came to exist - by evolving from a normal dinner table. So the idea evolved more or less into this: you are sitting a table. You have your own plate, with is your 'base'. There are 5 other guests at the table, each with their own plate. Your plate can spawn little pieces of pasta. You do so by 'ordering' them through a menu. Some pastas are better than others; some are faster, some are stronger. They have varying 'costs', which are debited from your credits (you start with a number of credits). Once spawned, your pastas start flying around. Their instinct is to fly to other plates, in order to conquer them (the objective of the game is having your pasta conquer all the plates on the table). But they are really autonomous, so after being spawned, you have no control over your pasta (think DotA or LoL creeps). Your pasta doesn't like other people's pasta, so if they meet, they shoot sauce at each other until one dies. You get credits for other pastas your own pasta kill. Once a pasta is in the vicinity of a plate, it starts conquering it for its team. It takes around 10 seconds for a plate to be conquered; less if more pasta from the same team are around. If pasta from other team are around, though, they get locked down in their attempt, unable to conquer the plate, until one of them die (think Battlefield's standard 'Conquest' mode). ",
    #"1024": "You get points every second for every plate you own. Over time, the concept also evolved to use an Italian bistro as its main scenario. Carlos, Carlos' Bistro's founder and owner Setup No major changes were made from my work setup. I used FDT and Starling creating an Adobe AIR (ActionScript) project, all tools or frameworks I already had some knowledge with. One big change for me was that I livestreamed my work through a twitch.tv account. This was a new thing for me. As recommended by Roushey, I used a program called XSplit and I got to say, it is pretty amazing. It made the livestream pretty effortless and the features are awesome, even for the free version. It was great to have some of my friends watch me, and then interact with them and random people through chat. It was also good knowing that I was also recording a local version of the files, so I could make a timelapse video later. Knowing the video was being recorded also made me a lot more self-conscious about my computer use, as if someone was watching over my shoulder. It made me realize that sometimes I spend too much time in seemingly inane tasks (I ended up wasting the longest time just to get some text alignment the way I wanted - it'll probably drive someone crazy if they watch it) and that I do way too many typos where writing code. I pretty much spend half of the time writing a line and the other half fixing the crazy characters in it. My own stream was probably boring to watch since I was coding for the most time. But livestreaming is one of the cool things to do as a spectator too. It was great seeing other people working - I had a few tabs opened on my second monitor all the time. It's actually a bit sad, because if I could, I could have spent the whole weekend just watching other people working! But I had to do my own work, so I'd only do it once in a while, when resting for a bit. Design Although I wanted some simple, low-fi, high-contrast kind of design, I ended up going with somewhat realistic (vector) art. I think it worked very well, fitting the mood of the game, but I also went overboard. For example: to know the state of a plate (who owns it, who's conquering it and how much time they have left before conquering it, which pasta units are in the queue, etc), you have to look at the plate's bill. The problem I realized when doing some tests is that people never look at the bill! They think it's some kind of prop, so they never actually read its details. Plus, if you're zoomed out too much, you can't actually read it, so it's hard to know what's going on with the game until you zoom in to the area of a specific plate. One other solution that didn't turn out to be as perfect as I thought was how to indicate who a plate base belongs to. In the game, that's indicated by the plate's decoration - its color denotes the team owner. But it's something that fits so well into the design that people never realized it, until they were told about it. In the end, the idea of going with a full physical metaphor is one that should be done with care. Things that are very important risk becoming background noise, unless the player knows its importance. ",
    #"1024": "Originally, I wanted to avoid any kind of heads-up display in my game. In the end, I ended up adding it at the bottom to indicate your credits and bases owned, as well as the hideous out-of-place-and-still-not-obvious Call Waiter button. But in hindsight, I should have gone with a simple HUD from the start, especially one that indicated each team's colors and general state of the game without the need for zooming in and out. Development Development went fast. But not fast enough. Even though I worked around 32 hours for this Ludum Dare, the biggest problem that I had to face in the end was overscoping. I had too much planned,",
    #"128": "So far, I have not seen any entry using this at its core gameplay. Alas, this is just a fun competition and after a while I decided not to be as strict with the game idea, and allowed myself to pick whatever I thought would work out. My initial idea was to create something where humanity tried to evolve to a next level but had some kind of foe trying to stop them from doing so. I kind of had this image of human souls flying in space towards a monolith or a space baby (all based in 2001: A Space Odyssey of course) but I could not think of compelling (read: serious) mechanics for that. - I had a few tabs opened on my second monitor all the time. It is actually a bit sad, because if I could, I could have spent the whole weekend just watching other people working! But I had to do my own work, so I would only do it once in a while, when resting for a bit. Design Although I wanted some simple, low-fi, high-contrast kind of design, I ended up going with somewhat realistic (vector) art. I think it worked very well, fitting the mood of the game, but I also went overboard",
    #"1080": "It is done, and submitted. You can play  Survival of the Tastiest on Android, and on the web. Playing on the web works, but you have to simulate multiple touch for table moving and that can be a bit confusing. There is a lot I would like to talk about. I will go through every topic, insted of making the typical what went right wrong list. Concept Working over the theme was probably one of the hardest tasks which I had to face. Originally, I had an idea of what kind of game I wanted to develop, gameplay wise - something with a lot of enemies actors, simple graphics, maybe set in space, controlled from a top-down view. I was confident that I could fit any theme around it. In the end, the problem with a theme like  Evolution  in a game is that evolution is unassisted. It happens through several seemingly random mutations over time, with the most apt permutation surviving. This genetic car simulator is, in my opinion, a great example of actual evolution of a species facing a challenge. But is it a game? In a game, you need to control something to reach an objective. That control goes against what evolution is supposed to be like. If you allow the user to pick how to evolve something, it is not evolution anymore - it is the equivalent of intelligent design, the fable invented by creationists to combat the idea of evolution. Being agnostic and a Pastafarian, that is not something that rubbed me the right way. Hence, my biggest dillema when deciding what to create was not with what I wanted to create, but with what I did not. I did not want to create an  intelligent design  simulator and wrongly call it evolution. This is a problem, of course, every other contestant also had to face. And judging by the entries submitted, not many managed to work around it. I would say the only real solution was through the use of artificial selection, somehow. So far, I have not seen any entry using this at its core gameplay. Alas, this is just a fun competition and after a while I decided not to be as strict with the game idea, and allowed myself to pick whatever I thought would work out. My initial idea was to create something where humanity tried to evolve to a next level but had some kind of foe trying to stop them from doing so. I kind of had this image of human souls flying in space towards a monolith or a space baby (all based in 2001: A Space Odyssey of course) but I could not think of compelling (read: serious) mechanics for that. Borgs were my next inspiration, as their whole hypothesis fit pretty well into the evolution theme. But how to make it work? Are you the borg, or fighting the Borg? The third and final idea came to me through my girlfriend, who somehow gave me the idea of making something about the evolution of Pasta. The more I thought about it the more it sounded like it would work, so I decided to go with it. Conversations with my inspiring co-worker Roushey (who also created the  Mechanical Underdogs  signature logo for my intros) further matured the concept, as it involved into the idea of having individual pieces of pasta flying around and trying to evolve until they became all-powerful. A secondary idea here was that the game would work to explain how the Flying Spaghetti Monster came to exist - by evolving from a normal dinner table. So the idea evolved more or less into this: you are sitting a table. You have your own plate, with is your  base . There are 5 other guests at the table, each with their own plate. Your plate can spawn little pieces of pasta. You do so by  ordering  them through a menu. Some pastas are better than others; some are faster, some are stronger. They have varying  costs , which are debited from your credits (you start with a number of credits). Once spawned, your pastas start flying around. Their instinct is to fly to other plates, in order to conquer them (the objective of the game is having your pasta conquer all the plates on the table). But they are really autonomous, so after being spawned, you have no control over your pasta (think DotA or LoL creeps). Your pasta does not like other people is pasta, so if they meet, they shoot sauce at each other until one dies. You get credits for other pastas your own pasta kill. Once a pasta is in the vicinity of a plate, it starts conquering it for its team. It takes around 10 seconds for a plate to be conquered; less if more pasta from the same team are around. If pasta from other team are around, though, they get locked down in their attempt, unable to conquer the plate, until one of them die (think Battlefield is standard  Conquest  mode). You get points every second for every plate you own. Over time, the concept also evolved to use an Italian bistro as its main scenario.",
    #"1080": "It is done, and submitted. You can play  Survival of the Tastiest on Android, and on the web. Playing on the web works, but you have to simulate multiple touch for table moving and that can be a bit confusing. There is a lot I would like to talk about. I will go through every topic, insted of making the typical what went right wrong list. Concept Working over the theme was probably one of the hardest tasks which I had to face. Originally, I had an idea of what kind of game I wanted to develop, gameplay wise - something with a lot of enemies actors, simple graphics, maybe set in space, controlled from a top-down view. I was confident that I could fit any theme around it. In the end, the problem with a theme like  Evolution  in a game is that evolution is unassisted. It happens through several seemingly random mutations over time, with the most apt permutation surviving. This genetic car simulator is, in my opinion, a great example of actual evolution of a species facing a challenge. But is it a game? In a game, you need to control something to reach an objective. That control goes against what evolution is supposed to be like. If you allow the user to pick how to evolve something, it is not evolution anymore - it is the equivalent of intelligent design, the fable invented by creationists to combat the idea of evolution. Being agnostic and a Pastafarian, that is not something that rubbed me the right way. Hence, my biggest dillema when deciding what to create was not with what I wanted to create, but with what I did not. I did not want to create an  intelligent design  simulator and wrongly call it evolution. This is a problem, of course, every other contestant also had to face. And judging by the entries submitted, not many managed to work around it. I would say the only real solution was through the use of artificial selection, somehow. So far, I have not seen any entry using this at its core gameplay. Alas, this is just a fun competition and after a while I decided not to be as strict with the game idea, and allowed myself to pick whatever I thought would work out. My initial idea was to create something where humanity tried to evolve to a next level but had some kind of foe trying to stop them from doing so. I kind of had this image of human souls flying in space towards a monolith or a space baby (all based in 2001: A Space Odyssey of course) but I could not think of compelling (read: serious) mechanics for that. Borgs were my next inspiration, as their whole hypothesis fit pretty well into the evolution theme. But how to make it work? Are you the borg, or fighting the Borg? The third and final idea came to me through my girlfriend, who somehow gave me the idea of making something about the evolution of Pasta. The more I thought about it the more it sounded like it would work, so I decided to go with it. Conversations with my inspiring co-worker Roushey (who also created the  Mechanical Underdogs  signature logo for my intros) further matured the concept, as it involved into the idea of having individual pieces of pasta flying around and trying to evolve until they became all-powerful. A secondary idea here was that the game would work to explain how the Flying Spaghetti Monster came to exist - by evolving from a normal dinner table. So the idea evolved more or less into this: you are sitting a table. You have your own plate, with is your  base . There are 5 other guests at the table, each with their own plate. Your plate can spawn little pieces of pasta. You do so by  ordering  them through a menu. Some pastas are better than others; some are faster, some are stronger. They have varying  costs , which are debited from your credits (you start with a number of credits). Once spawned, your pastas start flying around. Their instinct is to fly to other plates, in order to conquer them (the objective of the game is having your pasta conquer all the plates on the table). But they are really autonomous, so after being spawned, you have no control over your pasta (think DotA or LoL creeps). Your pasta does not like other people is pasta, so if they meet, they shoot sauce at each other until one dies. You get credits for other pastas your own pasta kill. Once a pasta is in the vicinity of a plate, it starts conquering it for its team. It takes around 10 seconds for a plate to be conquered; less if more pasta from the same team are around. If pasta from other team are around, though, they get locked down in their attempt, unable to conquer the plate, until one of them die (think Battlefield is standard  Conquest  mode). You get points every second for every plate you own. Over time, the concept also evolved to use an Italian bistro as its main scenario. Carlos, Carlos  Bistro is founder and owner Setup No major changes were made from my work setup. I used FDT and Starling creating an Adobe AIR (ActionScript) project, all tools or frameworks I already had some knowledge with. One big change for me was that I livestreamed my work through a twitch.tv account. This was a new thing for me. As recommended by Roushey, I used a program called XSplit and I got to say, it is pretty amazing. It made the livestream pretty effortless and the features are awesome, even for the free version. It was great to have some of my friends watch me, and then interact with them and random people through chat.",
    #"1080": "It is done, and submitted. You can play  Survival of the Tastiest on Android, and on the web. Playing on the web works, but you have to simulate multiple touch for table moving and that can be a bit confusing. There is a lot I would like to talk about. I will go through every topic, insted of making the typical what went right wrong list. Concept Working over the theme was probably one of the hardest tasks which I had to face. Originally, I had an idea of what kind of game I wanted to develop, gameplay wise - something with a lot of enemies actors, simple graphics, maybe set in space, controlled from a top-down view. I was confident that I could fit any theme around it. In the end, the problem with a theme like  Evolution  in a game is that evolution is unassisted. It happens through several seemingly random mutations over time, with the most apt permutation surviving. This genetic car simulator is, in my opinion, a great example of actual evolution of a species facing a challenge. But is it a game? In a game, you need to control something to reach an objective. That control goes against what evolution is supposed to be like. If you allow the user to pick how to evolve something, it is not evolution anymore - it is the equivalent of intelligent design, the fable invented by creationists to combat the idea of evolution. Being agnostic and a Pastafarian, that is not something that rubbed me the right way. Hence, my biggest dillema when deciding what to create was not with what I wanted to create, but with what I did not. I did not want to create an  intelligent design  simulator and wrongly call it evolution. This is a problem, of course, every other contestant also had to face. And judging by the entries submitted, not many managed to work around it. I would say the only real solution was through the use of artificial selection, somehow. So far, I have not seen any entry using this at its core gameplay. Alas, this is just a fun competition and after a while I decided not to be as strict with the game idea, and allowed myself to pick whatever I thought would work out. My initial idea was to create something where humanity tried to evolve to a next level but had some kind of foe trying to stop them from doing so. I kind of had this image of human souls flying in space towards a monolith or a space baby (all based in 2001: A Space Odyssey of course) but I could not think of compelling (read: serious) mechanics for that. Borgs were my next inspiration, as their whole hypothesis fit pretty well into the evolution theme. But how to make it work? Are you the borg, or fighting the Borg? The third and final idea came to me through my girlfriend, who somehow gave me the idea of making something about the evolution of Pasta. The more I thought about it the more it sounded like it would work, so I decided to go with it. Conversations with my inspiring co-worker Roushey (who also created the  Mechanical Underdogs  signature logo for my intros) further matured the concept, as it involved into the idea of having individual pieces of pasta flying around and trying to evolve until they became all-powerful. A secondary idea here was that the game would work to explain how the Flying Spaghetti Monster came to exist - by evolving from a normal dinner table. So the idea evolved more or less into this: you are sitting a table. You have your own plate, with is your  base . There are 5 other guests at the table, each with their own plate. Your plate can spawn little pieces of pasta. You do so by  ordering  them through a menu. Some pastas are better than others; some are faster, some are stronger. They have varying  costs , which are debited from your credits (you start with a number of credits). Once spawned, your pastas start flying around. Their instinct is to fly to other plates, in order to conquer them (the objective of the game is having your pasta conquer all the plates on the table). But they are really autonomous, so after being spawned, you have no control over your pasta (think DotA or LoL creeps). Your pasta does not like other people is pasta, so if they meet, they shoot sauce at each other until one dies. You get credits for other pastas your own pasta kill. Once a pasta is in the vicinity of a plate, it starts conquering it for its team. It takes around 10 seconds for a plate to be conquered; less if more pasta from the same team are around. If pasta from other team are around, though, they get locked down in their attempt, unable to conquer the plate, until one of them die (think Battlefield is standard  Conquest  mode). You get points every second for every plate you own. Over time, the concept also evolved to use an Italian bistro as its main scenario. Carlos, Carlos  Bistro is founder and owner Setup No major changes were made from my work setup. I used FDT and Starling creating an Adobe AIR (ActionScript) project, all tools or frameworks I already had some knowledge with. One big change for me was that I livestreamed my work through a twitch.tv account. This was a new thing for me. As recommended by Roushey, I used a program called XSplit and I got to say, it is pretty amazing. It made the livestream pretty effortless and the features are awesome, even for the free version. It was great to have some of my friends watch me, and then interact with them and random people through chat.It was also good knowing that I was also recording a local version of the files, so I could make a timelapse video later. Knowing the video was being recorded also made me a lot more self-conscious about my computer use, as if someone was watching over my shoulder. It made me realize that sometimes I spend too much time in seemingly inane tasks (I ended up wasting the longest time just to get some text alignment the way I wanted - it will probably drive someone crazy if they watch it) and that I do way too many typos where writing code.",
    #"1080": "It is done, and submitted. You can play  Survival of the Tastiest on Android, and on the web. Playing on the web works, but you have to simulate multiple touch for table moving and that can be a bit confusing. There is a lot I would like to talk about. I will go through every topic, insted of making the typical what went right wrong list. Concept Working over the theme was probably one of the hardest tasks which I had to face. Originally, I had an idea of what kind of game I wanted to develop, gameplay wise - something with a lot of enemies actors, simple graphics, maybe set in space, controlled from a top-down view. I was confident that I could fit any theme around it. In the end, the problem with a theme like  Evolution  in a game is that evolution is unassisted. It happens through several seemingly random mutations over time, with the most apt permutation surviving. This genetic car simulator is, in my opinion, a great example of actual evolution of a species facing a challenge. But is it a game? In a game, you need to control something to reach an objective. That control goes against what evolution is supposed to be like. If you allow the user to pick how to evolve something, it is not evolution anymore - it is the equivalent of intelligent design, the fable invented by creationists to combat the idea of evolution. Being agnostic and a Pastafarian, that is not something that rubbed me the right way. Hence, my biggest dillema when deciding what to create was not with what I wanted to create, but with what I did not. I did not want to create an  intelligent design  simulator and wrongly call it evolution. This is a problem, of course, every other contestant also had to face. And judging by the entries submitted, not many managed to work around it. I would say the only real solution was through the use of artificial selection, somehow. So far, I have not seen any entry using this at its core gameplay. Alas, this is just a fun competition and after a while I decided not to be as strict with the game idea, and allowed myself to pick whatever I thought would work out. My initial idea was to create something where humanity tried to evolve to a next level but had some kind of foe trying to stop them from doing so. I kind of had this image of human souls flying in space towards a monolith or a space baby (all based in 2001: A Space Odyssey of course) but I could not think of compelling (read: serious) mechanics for that. Borgs were my next inspiration, as their whole hypothesis fit pretty well into the evolution theme. But how to make it work? Are you the borg, or fighting the Borg? The third and final idea came to me through my girlfriend, who somehow gave me the idea of making something about the evolution of Pasta. The more I thought about it the more it sounded like it would work, so I decided to go with it. Conversations with my inspiring co-worker Roushey (who also created the  Mechanical Underdogs  signature logo for my intros) further matured the concept, as it involved into the idea of having individual pieces of pasta flying around and trying to evolve until they became all-powerful. A secondary idea here was that the game would work to explain how the Flying Spaghetti Monster came to exist - by evolving from a normal dinner table. So the idea evolved more or less into this: you are sitting a table. You have your own plate, with is your  base . There are 5 other guests at the table, each with their own plate. Your plate can spawn little pieces of pasta. You do so by  ordering  them through a menu. Some pastas are better than others; some are faster, some are stronger. They have varying  costs , which are debited from your credits (you start with a number of credits). Once spawned, your pastas start flying around. Their instinct is to fly to other plates, in order to conquer them (the objective of the game is having your pasta conquer all the plates on the table). But they are really autonomous, so after being spawned, you have no control over your pasta (think DotA or LoL creeps). Your pasta does not like other people is pasta, so if they meet, they shoot sauce at each other until one dies. You get credits for other pastas your own pasta kill. Once a pasta is in the vicinity of a plate, it starts conquering it for its team. It takes around 10 seconds for a plate to be conquered; less if more pasta from the same team are around. If pasta from other team are around, though, they get locked down in their attempt, unable to conquer the plate, until one of them die (think Battlefield is standard  Conquest  mode). You get points every second for every plate you own. Over time, the concept also evolved to use an Italian bistro as its main scenario. Carlos, Carlos  Bistro is founder and owner Setup No major changes were made from my work setup. I used FDT and Starling creating an Adobe AIR (ActionScript) project, all tools or frameworks I already had some knowledge with. One big change for me was that I livestreamed my work through a twitch.tv account. This was a new thing for me. As recommended by Roushey, I used a program called XSplit and I got to say, it is pretty amazing. It made the livestream pretty effortless and the features are awesome, even for the free version. It was great to have some of my friends watch me, and then interact with them and random people through chat. It was also good knowing that I was also recording a local version of the files, so I could make a timelapse video later. Knowing the video was being recorded also made me a lot more self conscious about my computer use, as if someone was watching over my shoulder. ",
    #"1438": "It is done, and submitted. You can play  Survival of the Tastiest on Android, and on the web. Playing on the web works, but you have to simulate multiple touch for table moving and that can be a bit confusing. There is a lot I would like to talk about. I will go through every topic, insted of making the typical what went right wrong list. Concept Working over the theme was probably one of the hardest tasks which I had to face. Originally, I had an idea of what kind of game I wanted to develop, gameplay wise   something with a lot of enemies actors, simple graphics, maybe set in space, controlled from a top down view. I was confident that I could fit any theme around it. In the end, the problem with a theme like  Evolution  in a game is that evolution is unassisted. It happens through several seemingly random mutations over time, with the most apt permutation surviving. This genetic car simulator is, in my opinion, a great example of actual evolution of a species facing a challenge. But is it a game? In a game, you need to control something to reach an objective. That control goes against what evolution is supposed to be like. If you allow the user to pick how to evolve something, it is not evolution anymore   it is the equivalent of intelligent design, the fable invented by creationists to combat the idea of evolution. Being agnostic and a Pastafarian, that is not something that rubbed me the right way. Hence, my biggest dillema when deciding what to create was not with what I wanted to create, but with what I did not. I did not want to create an  intelligent design  simulator and wrongly call it evolution. This is a problem, of course, every other contestant also had to face. And judging by the entries submitted, not many managed to work around it. I would say the only real solution was through the use of artificial selection, somehow. So far, I have not seen any entry using this at its core gameplay. Alas, this is just a fun competition and after a while I decided not to be as strict with the game idea, and allowed myself to pick whatever I thought would work out. My initial idea was to create something where humanity tried to evolve to a next level but had some kind of foe trying to stop them from doing so. I kind of had this image of human souls flying in space towards a monolith or a space baby (all based in 2001: A Space Odyssey of course) but I could not think of compelling (read: serious) mechanics for that. Borgs were my next inspiration, as their whole hypothesis fit pretty well into the evolution theme. But how to make it work? Are you the borg, or fighting the Borg? The third and final idea came to me through my girlfriend, who somehow gave me the idea of making something about the evolution of Pasta. The more I thought about it the more it sounded like it would work, so I decided to go with it. Conversations with my inspiring co worker Roushey (who also created the  Mechanical Underdogs  signature logo for my intros) further matured the concept, as it involved into the idea of having individual pieces of pasta flying around and trying to evolve until they became all powerful. A secondary idea here was that the game would work to explain how the Flying Spaghetti Monster came to exist   by evolving from a normal dinner table. So the idea evolved more or less into this: you are sitting a table. You have your own plate, with is your  base . There are 5 other guests at the table, each with their own plate. Your plate can spawn little pieces of pasta. You do so by  ordering  them through a menu. Some pastas are better than others; some are faster, some are stronger. They have varying  costs , which are debited from your credits (you start with a number of credits). Once spawned, your pastas start flying around. Their instinct is to fly to other plates, in order to conquer them (the objective of the game is having your pasta conquer all the plates on the table). But they are really autonomous, so after being spawned, you have no control over your pasta (think DotA or LoL creeps). Your pasta does not like other people is pasta, so if they meet, they shoot sauce at each other until one dies. You get credits for other pastas your own pasta kill. Once a pasta is in the vicinity of a plate, it starts conquering it for its team. It takes around 10 seconds for a plate to be conquered; less if more pasta from the same team are around. If pasta from other team are around, though, they get locked down in their attempt, unable to conquer the plate, until one of them die (think Battlefield is standard  Conquest  mode). You get points every second for every plate you own. Over time, the concept also evolved to use an Italian bistro as its main scenario. Carlos, Carlos  Bistro is founder and owner Setup No major changes were made from my work setup. I used FDT and Starling creating an Adobe AIR (ActionScript) project, all tools or frameworks I already had some knowledge with. One big change for me was that I livestreamed my work through a twitch.tv account. This was a new thing for me. As recommended by Roushey, I used a program called XSplit and I got to say, it is pretty amazing. It made the livestream pretty effortless and the features are awesome, even for the free version. It was great to have some of my friends watch me, and then interact with them and random people through chat. It was also good knowing that I was also recording a local version of the files, so I could make a timelapse video later. Knowing the video was being recorded also made me a lot more self conscious about my computer use, as if someone was watching over my shoulder. It made me realize that sometimes I spend too much time in seemingly inane tasks (I ended up wasting the longest time just to get some text alignment the way I wanted   it will probably drive someone crazy if they watch it) and that I do way too many typos where writing code. I pretty much spend half of the time writing a line and the other half fixing the crazy characters in it. My own stream was probably boring to watch since I was coding for the most time. But livestreaming is one of the cool things to do as a spectator too. It was great seeing other people working   I had a few tabs opened on my second monitor all the time. It is actually a bit sad, because if I could, I could have spent the whole weekend just watching other people working! ",
    
    #"1600": "It is done, and submitted. You can play  Survival of the Tastiest on Android, and on the web. Playing on the web works, but you have to simulate multiple touch for table moving and that can be a bit confusing. There is a lot I would like to talk about. I will go through every topic, insted of making the typical what went right wrong list. Concept Working over the theme was probably one of the hardest tasks which I had to face. Originally, I had an idea of what kind of game I wanted to develop, gameplay wise   something with a lot of enemies actors, simple graphics, maybe set in space, controlled from a top down view. I was confident that I could fit any theme around it. In the end, the problem with a theme like  Evolution  in a game is that evolution is unassisted. It happens through several seemingly random mutations over time, with the most apt permutation surviving. This genetic car simulator is, in my opinion, a great example of actual evolution of a species facing a challenge. But is it a game? In a game, you need to control something to reach an objective. That control goes against what evolution is supposed to be like. If you allow the user to pick how to evolve something, it is not evolution anymore   it is the equivalent of intelligent design, the fable invented by creationists to combat the idea of evolution. Being agnostic and a Pastafarian, that is not something that rubbed me the right way. Hence, my biggest dillema when deciding what to create was not with what I wanted to create, but with what I did not. I did not want to create an  intelligent design  simulator and wrongly call it evolution. This is a problem, of course, every other contestant also had to face. And judging by the entries submitted, not many managed to work around it. I would say the only real solution was through the use of artificial selection, somehow. So far, I have not seen any entry using this at its core gameplay. Alas, this is just a fun competition and after a while I decided not to be as strict with the game idea, and allowed myself to pick whatever I thought would work out. My initial idea was to create something where humanity tried to evolve to a next level but had some kind of foe trying to stop them from doing so. I kind of had this image of human souls flying in space towards a monolith or a space baby (all based in 2001: A Space Odyssey of course) but I could not think of compelling (read: serious) mechanics for that. Borgs were my next inspiration, as their whole hypothesis fit pretty well into the evolution theme. But how to make it work? Are you the borg, or fighting the Borg? The third and final idea came to me through my girlfriend, who somehow gave me the idea of making something about the evolution of Pasta. The more I thought about it the more it sounded like it would work, so I decided to go with it. Conversations with my inspiring co worker Roushey (who also created the  Mechanical Underdogs  signature logo for my intros) further matured the concept, as it involved into the idea of having individual pieces of pasta flying around and trying to evolve until they became all powerful. A secondary idea here was that the game would work to explain how the Flying Spaghetti Monster came to exist   by evolving from a normal dinner table. So the idea evolved more or less into this: you are sitting a table. You have your own plate, with is your  base . There are 5 other guests at the table, each with their own plate. Your plate can spawn little pieces of pasta. You do so by  ordering  them through a menu. Some pastas are better than others; some are faster, some are stronger. They have varying  costs , which are debited from your credits (you start with a number of credits). Once spawned, your pastas start flying around. Their instinct is to fly to other plates, in order to conquer them (the objective of the game is having your pasta conquer all the plates on the table). But they are really autonomous, so after being spawned, you have no control over your pasta (think DotA or LoL creeps). Your pasta does not like other people is pasta, so if they meet, they shoot sauce at each other until one dies. You get credits for other pastas your own pasta kill. Once a pasta is in the vicinity of a plate, it starts conquering it for its team. It takes around 10 seconds for a plate to be conquered; less if more pasta from the same team are around. If pasta from other team are around, though, they get locked down in their attempt, unable to conquer the plate, until one of them die (think Battlefield is standard  Conquest  mode). You get points every second for every plate you own. Over time, the concept also evolved to use an Italian bistro as its main scenario. Carlos, Carlos  Bistro is founder and owner Setup No major changes were made from my work setup. I used FDT and Starling creating an Adobe AIR (ActionScript) project, all tools or frameworks I already had some knowledge with. One big change for me was that I livestreamed my work through a twitch.tv account. This was a new thing for me. As recommended by Roushey, I used a program called XSplit and I got to say, it is pretty amazing. It made the livestream pretty effortless and the features are awesome, even for the free version. It was great to have some of my friends watch me, and then interact with them and random people through chat. It was also good knowing that I was also recording a local version of the files, so I could make a timelapse video later. Knowing the video was being recorded also made me a lot more self conscious about my computer use, as if someone was watching over my shoulder. It made me realize that sometimes I spend too much time in seemingly inane tasks (I ended up wasting the longest time just to get some text alignment the way I wanted   it will probably drive someone crazy if they watch it) and that I do way too many typos where writing code. I pretty much spend half of the time writing a line and the other half fixing the crazy characters in it. My own stream was probably boring to watch since I was coding for the most time. But livestreaming is one of the cool things to do as a spectator too. It was great seeing other people working   I had a few tabs opened on my second monitor all the time. It is actually a bit sad, because if I could, I could have spent the whole weekend just watching other people working! But I had to do my own work, so I would only do it once in a while, when resting for a bit. Design Although I wanted some simple, low fi, high contrast kind of design, I ended up going with somewhat realistic (vector) art. I think it worked very well, fitting the mood of the game, but I also went overboard. For example: to know the state of a plate (who owns it, who is conquering it and how much time they have left before conquering it, which pasta units are in the queue, etc), you have to look at the plate is bill. The problem I realized when doing some tests is that people never look at the bill! They think it is some kind of prop, so they never actually read its details. Plus, if you are zoomed out too much, you can not actually read it, so it is hard to know what is going on with the game until you zoom in to the area of a specific plate. One other solution that did not turn out to be as perfect as I thought was how to indicate who a plate base belongs to. ",
    
    #"2048": "It is done, and submitted. You can play  Survival of the Tastiest on Android, and on the web. Playing on the web works, but you have to simulate multiple touch for table moving and that can be a bit confusing. There is a lot I would like to talk about. I will go through every topic, insted of making the typical what went right wrong list. Concept Working over the theme was probably one of the hardest tasks which I had to face. Originally, I had an idea of what kind of game I wanted to develop, gameplay wise   something with a lot of enemies actors, simple graphics, maybe set in space, controlled from a top down view. I was confident that I could fit any theme around it. In the end, the problem with a theme like  Evolution  in a game is that evolution is unassisted. It happens through several seemingly random mutations over time, with the most apt permutation surviving. This genetic car simulator is, in my opinion, a great example of actual evolution of a species facing a challenge. But is it a game? In a game, you need to control something to reach an objective. That control goes against what evolution is supposed to be like. If you allow the user to pick how to evolve something, it is not evolution anymore   it is the equivalent of intelligent design, the fable invented by creationists to combat the idea of evolution. Being agnostic and a Pastafarian, that is not something that rubbed me the right way. Hence, my biggest dillema when deciding what to create was not with what I wanted to create, but with what I did not. I did not want to create an  intelligent design  simulator and wrongly call it evolution. This is a problem, of course, every other contestant also had to face. And judging by the entries submitted, not many managed to work around it. I would say the only real solution was through the use of artificial selection, somehow. So far, I have not seen any entry using this at its core gameplay. Alas, this is just a fun competition and after a while I decided not to be as strict with the game idea, and allowed myself to pick whatever I thought would work out. My initial idea was to create something where humanity tried to evolve to a next level but had some kind of foe trying to stop them from doing so. I kind of had this image of human souls flying in space towards a monolith or a space baby (all based in 2001: A Space Odyssey of course) but I could not think of compelling (read: serious) mechanics for that. Borgs were my next inspiration, as their whole hypothesis fit pretty well into the evolution theme. But how to make it work? Are you the borg, or fighting the Borg? The third and final idea came to me through my girlfriend, who somehow gave me the idea of making something about the evolution of Pasta. The more I thought about it the more it sounded like it would work, so I decided to go with it. Conversations with my inspiring co worker Roushey (who also created the  Mechanical Underdogs  signature logo for my intros) further matured the concept, as it involved into the idea of having individual pieces of pasta flying around and trying to evolve until they became all powerful. A secondary idea here was that the game would work to explain how the Flying Spaghetti Monster came to exist   by evolving from a normal dinner table. So the idea evolved more or less into this: you are sitting a table. You have your own plate, with is your  base . There are 5 other guests at the table, each with their own plate. Your plate can spawn little pieces of pasta. You do so by  ordering  them through a menu. Some pastas are better than others; some are faster, some are stronger. They have varying  costs , which are debited from your credits (you start with a number of credits). Once spawned, your pastas start flying around. Their instinct is to fly to other plates, in order to conquer them (the objective of the game is having your pasta conquer all the plates on the table). But they are really autonomous, so after being spawned, you have no control over your pasta (think DotA or LoL creeps). Your pasta does not like other people is pasta, so if they meet, they shoot sauce at each other until one dies. You get credits for other pastas your own pasta kill. Once a pasta is in the vicinity of a plate, it starts conquering it for its team. It takes around 10 seconds for a plate to be conquered; less if more pasta from the same team are around. If pasta from other team are around, though, they get locked down in their attempt, unable to conquer the plate, until one of them die (think Battlefield is standard  Conquest  mode). You get points every second for every plate you own. Over time, the concept also evolved to use an Italian bistro as its main scenario. Carlos, Carlos  Bistro is founder and owner Setup No major changes were made from my work setup. I used FDT and Starling creating an Adobe AIR (ActionScript) project, all tools or frameworks I already had some knowledge with. One big change for me was that I livestreamed my work through a twitch.tv account. This was a new thing for me. As recommended by Roushey, I used a program called XSplit and I got to say, it is pretty amazing. It made the livestream pretty effortless and the features are awesome, even for the free version. It was great to have some of my friends watch me, and then interact with them and random people through chat. It was also good knowing that I was also recording a local version of the files, so I could make a timelapse video later. Knowing the video was being recorded also made me a lot more self conscious about my computer use, as if someone was watching over my shoulder. It made me realize that sometimes I spend too much time in seemingly inane tasks (I ended up wasting the longest time just to get some text alignment the way I wanted   it will probably drive someone crazy if they watch it) and that I do way too many typos where writing code. I pretty much spend half of the time writing a line and the other half fixing the crazy characters in it. My own stream was probably boring to watch since I was coding for the most time. But livestreaming is one of the cool things to do as a spectator too. It was great seeing other people working   I had a few tabs opened on my second monitor all the time. It is actually a bit sad, because if I could, I could have spent the whole weekend just watching other people working! But I had to do my own work, so I would only do it once in a while, when resting for a bit. Design Although I wanted some simple, low fi, high contrast kind of design, I ended up going with somewhat realistic (vector) art. I think it worked very well, fitting the mood of the game, but I also went overboard. For example: to know the state of a plate (who owns it, who is conquering it and how much time they have left before conquering it, which pasta units are in the queue, etc), you have to look at the plate is bill. The problem I realized when doing some tests is that people never look at the bill! They think it is some kind of prop, so they never actually read its details. Plus, if you are zoomed out too much, you can not actually read it, so it is hard to know what is going on with the game until you zoom in to the area of a specific plate. One other solution that did not turn out to be as perfect as I thought was how to indicate who a plate base belongs to. In the game, that is indicated by the plate is decoration   its color denotes the team owner. But it is something that fits so well into the design that people never realized it, until they were told about it. In the end, the idea of going with a full physical metaphor is one that should be done with care. Things that are very important risk becoming background noise, unless the player knows its importance. Originally, I wanted to avoid any kind of heads up display in my game. In the end, I ended up adding it at the bottom to indicate your credits and bases owned, as well as the hideous out of place and still not obvious  Call Waiter  button. But in hindsight, I should have gone with a simple HUD from the start, especially one that indicated each team is colors and general state of the game without the need for zooming in and out. Development Development went fast. But not fast enough. Even though I worked around 32 hours for this Ludum Dare, the biggest problem that I had to face in the end was overscoping. I had too much planned, and could not get it all done. based on this text please give me a summary no less than 2048 words.",
    #"2048": "It is done, and submitted. You can play  Survival of the Tastiest on Android, and on the web. Playing on the web works, but you have to simulate multiple touch for table moving and that can be a bit confusing. There is a lot I would like to talk about. I will go through every topic, insted of making the typical what went right wrong list. Concept Working over the theme was probably one of the hardest tasks which I had to face. Originally, I had an idea of what kind of game I wanted to develop, gameplay wise - something with a lot of enemies actors, simple graphics, maybe set in space, controlled from a top-down view. I was confident that I could fit any theme around it. In the end, the problem with a theme like  Evolution  in a game is that evolution is unassisted. It happens through several seemingly random mutations over time, with the most apt permutation surviving. This genetic car simulator is, in my opinion, a great example of actual evolution of a species facing a challenge. But is it a game? In a game, you need to control something to reach an objective. That control goes against what evolution is supposed to be like. If you allow the user to pick how to evolve something, it is not evolution anymore - it is the equivalent of intelligent design, the fable invented by creationists to combat the idea of evolution. Being agnostic and a Pastafarian, that is not something that rubbed me the right way. Hence, my biggest dillema when deciding what to create was not with what I wanted to create, but with what I did not. I did not want to create an  intelligent design  simulator and wrongly call it evolution. This is a problem, of course, every other contestant also had to face. And judging by the entries submitted, not many managed to work around it. I would say the only real solution was through the use of artificial selection, somehow. So far, I have not seen any entry using this at its core gameplay. Alas, this is just a fun competition and after a while I decided not to be as strict with the game idea, and allowed myself to pick whatever I thought would work out. My initial idea was to create something where humanity tried to evolve to a next level but had some kind of foe trying to stop them from doing so. I kind of had this image of human souls flying in space towards a monolith or a space baby (all based in 2001: A Space Odyssey of course) but I could not think of compelling (read: serious) mechanics for that. Borgs were my next inspiration, as their whole hypothesis fit pretty well into the evolution theme. But how to make it work? Are you the borg, or fighting the Borg? The third and final idea came to me through my girlfriend, who somehow gave me the idea of making something about the evolution of Pasta. The more I thought about it the more it sounded like it would work, so I decided to go with it. Conversations with my inspiring co-worker Roushey (who also created the  Mechanical Underdogs  signature logo for my intros) further matured the concept, as it involved into the idea of having individual pieces of pasta flying around and trying to evolve until they became all-powerful. A secondary idea here was that the game would work to explain how the Flying Spaghetti Monster came to exist - by evolving from a normal dinner table. So the idea evolved more or less into this: you are sitting a table. You have your own plate, with is your  base . There are 5 other guests at the table, each with their own plate. Your plate can spawn little pieces of pasta. You do so by  ordering  them through a menu. Some pastas are better than others; some are faster, some are stronger. They have varying  costs , which are debited from your credits (you start with a number of credits). Once spawned, your pastas start flying around. Their instinct is to fly to other plates, in order to conquer them (the objective of the game is having your pasta conquer all the plates on the table). But they are really autonomous, so after being spawned, you have no control over your pasta (think DotA or LoL creeps). Your pasta does not like other people is pasta, so if they meet, they shoot sauce at each other until one dies. You get credits for other pastas your own pasta kill. Once a pasta is in the vicinity of a plate, it starts conquering it for its team. It takes around 10 seconds for a plate to be conquered; less if more pasta from the same team are around. If pasta from other team are around, though, they get locked down in their attempt, unable to conquer the plate, until one of them die (think Battlefield is standard  Conquest  mode). You get points every second for every plate you own. Over time, the concept also evolved to use an Italian bistro as its main scenario. Carlos, Carlos  Bistro is founder and owner Setup No major changes were made from my work setup. I used FDT and Starling creating an Adobe AIR (ActionScript) project, all tools or frameworks I already had some knowledge with. One big change for me was that I livestreamed my work through a twitch.tv account. This was a new thing for me. As recommended by Roushey, I used a program called XSplit and I got to say, it is pretty amazing. It made the livestream pretty effortless and the features are awesome, even for the free version. It was great to have some of my friends watch me, and then interact with them and random people through chat. It was also good knowing that I was also recording a local version of the files, so I could make a timelapse video later. Knowing the video was being recorded also made me a lot more self-conscious about my computer use, as if someone was watching over my shoulder. It made me realize that sometimes I spend too much time in seemingly inane tasks (I ended up wasting the longest time just to get some text alignment the way I wanted - it will probably drive someone crazy if they watch it) and that I do way too many typos where writing code. I pretty much spend half of the time writing a line and the other half fixing the crazy characters in it. My own stream was probably boring to watch since I was coding for the most time. But livestreaming is one of the cool things to do as a spectator too. It was great seeing other people working - I had a few tabs opened on my second monitor all the time. It is actually a bit sad, because if I could, I could have spent the whole weekend just watching other people working! But I had to do my own work, so I would only do it once in a while, when resting for a bit. Design Although I wanted some simple, low-fi, high-contrast kind of design, I ended up going with somewhat realistic (vector) art. I think it worked very well, fitting the mood of the game, but I also went overboard. For example: to know the state of a plate (who owns it, who is conquering it and how much time they have left before conquering it, which pasta units are in the queue, etc), you have to look at the plate is bill. The problem I realized when doing some tests is that people never look at the bill! They think it is some kind of prop, so they never actually read its details. Plus, if you are zoomed out too much, you can not actually read it, so it is hard to know what is going on with the game until you zoom in to the area of a specific plate. One other solution that did not turn out to be as perfect as I thought was how to indicate who a plate base belongs to. In the game, that is indicated by the plate is decoration - its color denotes the team owner. But it is something that fits so well into the design that people never realized it, until they were told about it. In the end, the idea of going with a full physical metaphor is one that should be done with care. Things that are very important risk becoming background noise, unless the player knows its importance. Originally, I wanted to avoid any kind of heads-up display in my game. In the end, I ended up adding it at the bottom to indicate your credits and bases owned, as well as the hideous out-of-place-and-still-not-obvious  Call Waiter  button. But in hindsight, I should have gone with a simple HUD from the start, especially one that indicated each team is colors and general state of the game without the need for zooming in and out. Development Development went fast. But not fast enough. Even though I worked around 32 hours for this Ludum Dare, the biggest problem that I had to face in the end was overscoping. I had too much planned, and could not get it all done. based on this text please give me a summary no less than 2048 words."
    }
    parser = argparse.ArgumentParser()
    parser.add_argument("--log_file", '-l',type=str, default="./batch_bench_quick.log", help="log file name")
    parser.add_argument("--cpu_max", '-m',type=int, default=224, help="cpu max number")
    parser.add_argument("--cpu_step", '-s',type=int, default=8, help="cpu value step")
    parser.add_argument("--prompt", '-p',type=str, required=True, help="prompt string")
    parser.add_argument('--dry-run', action='store_true', help='Run the script in dry-run mode.')

    args = parser.parse_args()
    
    logger = init_logger(args.log_file+"."+timestamp)
    

    # print critical info
    commands = generate_numa_commands(args.cpu_max,args.cpu_step)
    logger.info(f"length of commands={len(commands)}")
    for cmd in commands:
        logger.info(cmd)
    #cpu_values = cpu_seq(args.cpu_step,args.cpu_max)
    logger.info(f"length of cpu_values={len(cpu_values)}")
    logger.info(f"prompt string length={len(args.prompt)}")
    prompt = args.prompt


    if args.dry_run:
        logger.info(f'dry-run======>')
        exit(0)
    
    
    deployment_name = "llm-deploy"  # Replace with your deployment name
    
    current_datetime = datetime.now()
    # Format the datetime object as a string
    TS = current_datetime.strftime("%Y-%m-%d-%H-%M-%S")


    copy_script()



    # do_bench()
    # do_test()


    command = "/usr/bin/numactl -C 0-55,56-111 python3 llm_inference_api.py"

    # Iterate through the dictionary and run the command for each value
    for key, value in parameters.items():
        print(f"value={value}")
        prompt=value
        i = 0
        for cpu_value in cpu_values:
            do_bench(cpu_value,1,prompt)
            continue
            logger.info(f"-------------------------")
            logger.info(f" deploy {deployment_name}: cpu={cpu_value}")

            #input("Before scale to 0, Press Enter to continue...")
            scale_deployment(0,deployment_name)
            wait_ready_deploy(deployment_name)
            #input("After scale to 0, Press Enter to continue...")
            modify_deployment_resources(deployment_name, cpu_value,command)
            #modify_deployment_resources(deployment_name, cpu_value,command)
            #wait_for_deployment_complete(deployment_name)
            wait_ready_deploy(deployment_name)
            #input("After modify_deployment_resources, Press Enter to continue...")
            scale_deployment(1,deployment_name)
            wait_ready_deploy(deployment_name)
            #input("After scale to 1, Press Enter to continue...")
            get_metrics()
            for iteration in range(iterations):
                logger.info(f"Starting benchmark for CPU Value: {cpu_value}, Iteration: {iteration + 1}/{iterations}")
                #do_bench(cpu_value,iteration,prompt)
                logger.info(f"Finished benchmark for CPU Value: {cpu_value}, Iteration: {iteration + 1}/{iterations}")
            i = i + 1
            

        

